@model FunWithValidation.Models.Foo

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm())
{
    <div class="form-group">
        @Html.LabelFor(model => model.Username)
        @Html.TextBoxFor(model => model.Username, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.Username)
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Password)
        @Html.PasswordFor(model => model.Password, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.Password)
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PasswordConfirmation)
        @Html.PasswordFor(model => model.PasswordConfirmation, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.PasswordConfirmation)
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.EmailAddress)
        @Html.TextBoxFor(model => model.EmailAddress, new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.EmailAddress)
    </div>

    <div class="form-group">
        @Html.EditorFor(model => model.AcceptTerms)
        @Html.LabelFor(model => model.AcceptTerms)
        @Html.ValidationMessageFor(model => model.AcceptTerms)
    </div>

    <div>
        <input class="btn btn-primary" type="submit" value="Create" />
        <a class="btn btn-default" href="@Url.Action("Index")">Return to Index</a>
    </div>
}

@section Script
{
    <script>
        /// <reference path="~/Scripts/jquery-1.10.2.min.js" />
        /// <reference path="~/Scripts/jquery.validate.min.js" />
        /// <reference path="~/Scripts/jquery.validate.unobtrusive.min.js" />

        if ($.validator && $.validator.unobtrusive) {
            $.validator.unobtrusive.adapters.add('mustcontain', ['text'], function (options) {
                options.rules['mustcontain'] = {
                    text: options.params.text
                };

                options.messages['mustcontain'] = options.message;
            });

            $.validator.addMethod('mustcontain', function (value, element, params) {
                return value.toString().includes(params.text);
            });
        }
    </script>
}